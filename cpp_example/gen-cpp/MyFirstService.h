/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MyFirstService_H
#define MyFirstService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "myfirst_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MyFirstServiceIf {
 public:
  virtual ~MyFirstServiceIf() {}
  virtual void ping() = 0;
  virtual void log(const std::string& filename) = 0;
  virtual int32_t multiply(const int32_t number1, const int32_t number2) = 0;
  virtual int32_t get_log_size(const std::string& filename) = 0;
  virtual void send_binary(const std::string& blob, const std::string& filename) = 0;
};

class MyFirstServiceIfFactory {
 public:
  typedef MyFirstServiceIf Handler;

  virtual ~MyFirstServiceIfFactory() {}

  virtual MyFirstServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MyFirstServiceIf* /* handler */) = 0;
  };

class MyFirstServiceIfSingletonFactory : virtual public MyFirstServiceIfFactory {
 public:
  MyFirstServiceIfSingletonFactory(const ::std::shared_ptr<MyFirstServiceIf>& iface) : iface_(iface) {}
  virtual ~MyFirstServiceIfSingletonFactory() {}

  virtual MyFirstServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(MyFirstServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<MyFirstServiceIf> iface_;
};

class MyFirstServiceNull : virtual public MyFirstServiceIf {
 public:
  virtual ~MyFirstServiceNull() {}
  void ping() override {
    return;
  }
  void log(const std::string& /* filename */) override {
    return;
  }
  int32_t multiply(const int32_t /* number1 */, const int32_t /* number2 */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_log_size(const std::string& /* filename */) override {
    int32_t _return = 0;
    return _return;
  }
  void send_binary(const std::string& /* blob */, const std::string& /* filename */) override {
    return;
  }
};


class MyFirstService_ping_args {
 public:

  MyFirstService_ping_args(const MyFirstService_ping_args&) noexcept;
  MyFirstService_ping_args& operator=(const MyFirstService_ping_args&) noexcept;
  MyFirstService_ping_args() noexcept {
  }

  virtual ~MyFirstService_ping_args() noexcept;

  bool operator == (const MyFirstService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MyFirstService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_ping_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MyFirstService_ping_pargs {
 public:


  virtual ~MyFirstService_ping_pargs() noexcept;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MyFirstService_ping_result {
 public:

  MyFirstService_ping_result(const MyFirstService_ping_result&) noexcept;
  MyFirstService_ping_result& operator=(const MyFirstService_ping_result&) noexcept;
  MyFirstService_ping_result() noexcept {
  }

  virtual ~MyFirstService_ping_result() noexcept;

  bool operator == (const MyFirstService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MyFirstService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_ping_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MyFirstService_ping_presult {
 public:


  virtual ~MyFirstService_ping_presult() noexcept;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _MyFirstService_log_args__isset {
  _MyFirstService_log_args__isset() : filename(false) {}
  bool filename :1;
} _MyFirstService_log_args__isset;

class MyFirstService_log_args {
 public:

  MyFirstService_log_args(const MyFirstService_log_args&);
  MyFirstService_log_args& operator=(const MyFirstService_log_args&);
  MyFirstService_log_args() noexcept
                          : filename() {
  }

  virtual ~MyFirstService_log_args() noexcept;
  std::string filename;

  _MyFirstService_log_args__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const MyFirstService_log_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const MyFirstService_log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_log_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MyFirstService_log_pargs {
 public:


  virtual ~MyFirstService_log_pargs() noexcept;
  const std::string* filename;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MyFirstService_multiply_args__isset {
  _MyFirstService_multiply_args__isset() : number1(false), number2(false) {}
  bool number1 :1;
  bool number2 :1;
} _MyFirstService_multiply_args__isset;

class MyFirstService_multiply_args {
 public:

  MyFirstService_multiply_args(const MyFirstService_multiply_args&) noexcept;
  MyFirstService_multiply_args& operator=(const MyFirstService_multiply_args&) noexcept;
  MyFirstService_multiply_args() noexcept
                               : number1(0),
                                 number2(0) {
  }

  virtual ~MyFirstService_multiply_args() noexcept;
  int32_t number1;
  int32_t number2;

  _MyFirstService_multiply_args__isset __isset;

  void __set_number1(const int32_t val);

  void __set_number2(const int32_t val);

  bool operator == (const MyFirstService_multiply_args & rhs) const
  {
    if (!(number1 == rhs.number1))
      return false;
    if (!(number2 == rhs.number2))
      return false;
    return true;
  }
  bool operator != (const MyFirstService_multiply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_multiply_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MyFirstService_multiply_pargs {
 public:


  virtual ~MyFirstService_multiply_pargs() noexcept;
  const int32_t* number1;
  const int32_t* number2;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MyFirstService_multiply_result__isset {
  _MyFirstService_multiply_result__isset() : success(false) {}
  bool success :1;
} _MyFirstService_multiply_result__isset;

class MyFirstService_multiply_result {
 public:

  MyFirstService_multiply_result(const MyFirstService_multiply_result&) noexcept;
  MyFirstService_multiply_result& operator=(const MyFirstService_multiply_result&) noexcept;
  MyFirstService_multiply_result() noexcept
                                 : success(0) {
  }

  virtual ~MyFirstService_multiply_result() noexcept;
  int32_t success;

  _MyFirstService_multiply_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MyFirstService_multiply_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MyFirstService_multiply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_multiply_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MyFirstService_multiply_presult__isset {
  _MyFirstService_multiply_presult__isset() : success(false) {}
  bool success :1;
} _MyFirstService_multiply_presult__isset;

class MyFirstService_multiply_presult {
 public:


  virtual ~MyFirstService_multiply_presult() noexcept;
  int32_t* success;

  _MyFirstService_multiply_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _MyFirstService_get_log_size_args__isset {
  _MyFirstService_get_log_size_args__isset() : filename(false) {}
  bool filename :1;
} _MyFirstService_get_log_size_args__isset;

class MyFirstService_get_log_size_args {
 public:

  MyFirstService_get_log_size_args(const MyFirstService_get_log_size_args&);
  MyFirstService_get_log_size_args& operator=(const MyFirstService_get_log_size_args&);
  MyFirstService_get_log_size_args() noexcept
                                   : filename() {
  }

  virtual ~MyFirstService_get_log_size_args() noexcept;
  std::string filename;

  _MyFirstService_get_log_size_args__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const MyFirstService_get_log_size_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const MyFirstService_get_log_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_get_log_size_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MyFirstService_get_log_size_pargs {
 public:


  virtual ~MyFirstService_get_log_size_pargs() noexcept;
  const std::string* filename;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MyFirstService_get_log_size_result__isset {
  _MyFirstService_get_log_size_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _MyFirstService_get_log_size_result__isset;

class MyFirstService_get_log_size_result {
 public:

  MyFirstService_get_log_size_result(const MyFirstService_get_log_size_result&);
  MyFirstService_get_log_size_result& operator=(const MyFirstService_get_log_size_result&);
  MyFirstService_get_log_size_result() noexcept
                                     : success(0) {
  }

  virtual ~MyFirstService_get_log_size_result() noexcept;
  int32_t success;
  MyError error;

  _MyFirstService_get_log_size_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_error(const MyError& val);

  bool operator == (const MyFirstService_get_log_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const MyFirstService_get_log_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_get_log_size_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MyFirstService_get_log_size_presult__isset {
  _MyFirstService_get_log_size_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _MyFirstService_get_log_size_presult__isset;

class MyFirstService_get_log_size_presult {
 public:


  virtual ~MyFirstService_get_log_size_presult() noexcept;
  int32_t* success;
  MyError error;

  _MyFirstService_get_log_size_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _MyFirstService_send_binary_args__isset {
  _MyFirstService_send_binary_args__isset() : blob(false), filename(false) {}
  bool blob :1;
  bool filename :1;
} _MyFirstService_send_binary_args__isset;

class MyFirstService_send_binary_args {
 public:

  MyFirstService_send_binary_args(const MyFirstService_send_binary_args&);
  MyFirstService_send_binary_args& operator=(const MyFirstService_send_binary_args&);
  MyFirstService_send_binary_args() noexcept
                                  : blob(),
                                    filename() {
  }

  virtual ~MyFirstService_send_binary_args() noexcept;
  std::string blob;
  std::string filename;

  _MyFirstService_send_binary_args__isset __isset;

  void __set_blob(const std::string& val);

  void __set_filename(const std::string& val);

  bool operator == (const MyFirstService_send_binary_args & rhs) const
  {
    if (!(blob == rhs.blob))
      return false;
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const MyFirstService_send_binary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_send_binary_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MyFirstService_send_binary_pargs {
 public:


  virtual ~MyFirstService_send_binary_pargs() noexcept;
  const std::string* blob;
  const std::string* filename;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

template <class Protocol_>
class MyFirstServiceClientT : virtual public MyFirstServiceIf {
 public:
  MyFirstServiceClientT(std::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  MyFirstServiceClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void ping() override;
  void send_ping();
  void recv_ping();
  void log(const std::string& filename) override;
  void send_log(const std::string& filename);
  int32_t multiply(const int32_t number1, const int32_t number2) override;
  void send_multiply(const int32_t number1, const int32_t number2);
  int32_t recv_multiply();
  int32_t get_log_size(const std::string& filename) override;
  void send_get_log_size(const std::string& filename);
  int32_t recv_get_log_size();
  void send_binary(const std::string& blob, const std::string& filename) override;
  void send_send_binary(const std::string& blob, const std::string& filename);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef MyFirstServiceClientT< ::apache::thrift::protocol::TProtocol> MyFirstServiceClient;

template <class Protocol_>
class MyFirstServiceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::std::shared_ptr<MyFirstServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MyFirstServiceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (MyFirstServiceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(nullptr), specialized(nullptr) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_log(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_multiply(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiply(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_get_log_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_log_size(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_send_binary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_send_binary(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  MyFirstServiceProcessorT(::std::shared_ptr<MyFirstServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = ProcessFunctions(
      &MyFirstServiceProcessorT::process_ping,
      &MyFirstServiceProcessorT::process_ping);
    processMap_["log"] = ProcessFunctions(
      &MyFirstServiceProcessorT::process_log,
      &MyFirstServiceProcessorT::process_log);
    processMap_["multiply"] = ProcessFunctions(
      &MyFirstServiceProcessorT::process_multiply,
      &MyFirstServiceProcessorT::process_multiply);
    processMap_["get_log_size"] = ProcessFunctions(
      &MyFirstServiceProcessorT::process_get_log_size,
      &MyFirstServiceProcessorT::process_get_log_size);
    processMap_["send_binary"] = ProcessFunctions(
      &MyFirstServiceProcessorT::process_send_binary,
      &MyFirstServiceProcessorT::process_send_binary);
  }

  virtual ~MyFirstServiceProcessorT() {}
};

typedef MyFirstServiceProcessorT< ::apache::thrift::protocol::TDummyProtocol > MyFirstServiceProcessor;

template <class Protocol_>
class MyFirstServiceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  MyFirstServiceProcessorFactoryT(const ::std::shared_ptr< MyFirstServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< MyFirstServiceIfFactory > handlerFactory_;
};

typedef MyFirstServiceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > MyFirstServiceProcessorFactory;

class MyFirstServiceMultiface : virtual public MyFirstServiceIf {
 public:
  MyFirstServiceMultiface(std::vector<std::shared_ptr<MyFirstServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MyFirstServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MyFirstServiceIf> > ifaces_;
  MyFirstServiceMultiface() {}
  void add(::std::shared_ptr<MyFirstServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void log(const std::string& filename) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->log(filename);
    }
    ifaces_[i]->log(filename);
  }

  int32_t multiply(const int32_t number1, const int32_t number2) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiply(number1, number2);
    }
    return ifaces_[i]->multiply(number1, number2);
  }

  int32_t get_log_size(const std::string& filename) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_log_size(filename);
    }
    return ifaces_[i]->get_log_size(filename);
  }

  void send_binary(const std::string& blob, const std::string& filename) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_binary(blob, filename);
    }
    ifaces_[i]->send_binary(blob, filename);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class MyFirstServiceConcurrentClientT : virtual public MyFirstServiceIf {
 public:
  MyFirstServiceConcurrentClientT(std::shared_ptr< Protocol_> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(prot);
  }
  MyFirstServiceConcurrentClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void ping() override;
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void log(const std::string& filename) override;
  void send_log(const std::string& filename);
  int32_t multiply(const int32_t number1, const int32_t number2) override;
  int32_t send_multiply(const int32_t number1, const int32_t number2);
  int32_t recv_multiply(const int32_t seqid);
  int32_t get_log_size(const std::string& filename) override;
  int32_t send_get_log_size(const std::string& filename);
  int32_t recv_get_log_size(const int32_t seqid);
  void send_binary(const std::string& blob, const std::string& filename) override;
  void send_send_binary(const std::string& blob, const std::string& filename);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

typedef MyFirstServiceConcurrentClientT< ::apache::thrift::protocol::TProtocol> MyFirstServiceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#include "MyFirstService.tcc"
#include "myfirst_types.tcc"

#endif
