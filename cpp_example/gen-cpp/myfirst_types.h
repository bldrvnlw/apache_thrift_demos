/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef myfirst_TYPES_H
#define myfirst_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class MyError;

typedef struct _MyError__isset {
  _MyError__isset() : error_code(false), error_description(false) {}
  bool error_code :1;
  bool error_description :1;
} _MyError__isset;

class MyError : public ::apache::thrift::TException {
 public:

  MyError(const MyError&);
  MyError& operator=(const MyError&);
  MyError() noexcept
          : error_code(0),
            error_description() {
  }

  virtual ~MyError() noexcept;
  int32_t error_code;
  std::string error_description;

  _MyError__isset __isset;

  void __set_error_code(const int32_t val);

  void __set_error_description(const std::string& val);

  bool operator == (const MyError & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_description == rhs.error_description))
      return false;
    return true;
  }
  bool operator != (const MyError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyError & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(MyError &a, MyError &b);

std::ostream& operator<<(std::ostream& out, const MyError& obj);



#include "myfirst_types.tcc"

#endif
