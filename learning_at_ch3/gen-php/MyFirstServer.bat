<?/** :
@echo off
REM This is a self-calling batch/php hybrid 
REM Used to compensate for lack of shebang on windows
C:\tools\php81\php.exe -d short_open_tag=On %~f0 %*
exit /b
*/ ?>
<?php
ini_set('error_log', 'd:\\tmp\\phperrorlog.txt');
error_reporting(E_ALL);
date_default_timezone_set('Europe/Amsterdam');

// generated by composer dump-autoload after editing composer.json PSR-4
require 'D:\\Projects\\apache_thrift\\vendor\\autoload.php';

$THRIFT_ROOT =  'D:\\Projects\\apache_thrift\\thrift_0_16\\lib\\php\\lib\\';
$GEN_PHP_DIR = 'D:\\Projects\\apache_thrift\\learning_at_ch3\\gen-php\\';
//$GEN_PHP_DIR = __DIR__.'/../gen-php';

require_once $THRIFT_ROOT.'\\ClassLoader\\ThriftClassLoader.php';

use Thrift\ClassLoader\ThriftClassLoader;

// PSR-4, use $thriftClassLoader->registerNamespace - since thrift 0.12
$loader = new ThriftClassLoader();
$loader->registerNamespace('Thrift', $THRIFT_ROOT);
$loader->registerNamespace('myfirst', $GEN_PHP_DIR);
$loader->register();

use Thrift\Protocol\TBinaryProtocol;
use Thrift\Transport\TPhpStream;
use Thrift\Transport\TBufferedTransport;

class MyFirstHandler implements \myfirst\MyFirstServiceIf {

	public function log($filename) {
		$time = date('Y-m-d H:m:s');
		file_put_contents(__DIR__."/".$filename, $time."\n", FILE_APPEND);
		error_log("Written " . $time . " to " . $filename);
	}

	public function multiply($number1, $number2) {
		error_log("multiply " . $number1 . " by " . $number2);
		return $number1 * $number2;
	}

	public function get_log_size($filename) {
		$filesize = filesize(__DIR__."/".$filename);
		if ($filesize === false) {
			$e = new \myfirst\MyError();
			$e->error_code = 1;
			$e->error_description = "Can't get size information for file " . $filename;
			error_log($e->error_description);
			throw $e;
		}
		error_log("size of log file " . $filename . " is " . $filesize . "B");
		return $filesize;
	}
};

header('Content-Type', 'application/x-thrift');
echo "\r\n";

$handler = new MyFirstHandler();
$processor = new \myfirst\MyFirstServiceProcessor($handler);

$transport = new TBufferedTransport(new TPhpStream(TPhpStream::MODE_R | TPhpStream::MODE_W));
$protocol = new TBinaryProtocol($transport, true, true);

$transport->open();
$processor->process($protocol, $protocol);
$transport->close();
?>